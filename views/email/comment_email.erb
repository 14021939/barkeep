<%# The email which is sent when someone comments on a commit. It can display multiple comments if we've
  # batched more than one comment together before sending the notification email.
  #  - grit_commit
  #  - comments_by_file: a hash of file_name => [comments]
  #  - diffs_by_file: A hash of tagged diffs generated by GitHelper.get_tagged_commit_diff,
  #    grouped by filename.
  #
  # TODO(philc): If there are multiple comments which span the same diff hunk, this does not merge those
  # diff hunks together -- each comment will have the full diff hunk included around it, which means the same
  # diff hunk may appear multiple times in the email.
  # TODO(philc): Make each comment a deep-link back to the diff view.
%>

<font face="monospace">

<a href="http://barkeep.com/commits/<%= grit_commit.id_abbrev %>"><%= grit_commit.id_abbrev %></a>
<%= grit_commit.author %> - <%= grit_commit.short_message %><br/>
<%= StringHelper.short_date(grit_commit.date) %>

<br/><br/>

<% unless general_comments.empty? %>
  <% title = "General comments" %>
  <%= title %></br>
  <%= "-" * "General comments".size %><br/>

  <% general_comments.each do |comment| %>
    &lt;<%= CGI.escape_html(comment.user.name) %>&gt; <%= CGI.escape_html(comment.text) %><br/><br/>
  <% end  %>
<% end %>

<% comments_by_file.each do |filename, comments| %>
  <%= filename %><br/>
  <%= "-" * filename.size %><br/>

  <pre><%=
    comments.map do |comment|
      line_diffs = context_around_line(comment.line_number, diffs_by_file[filename][:lines])
      next if line_diffs.empty?
      # Do this so there isn't useless whitespace surrounding the diff.
      line_diffs = strip_unchanged_blank_lines(line_diffs)

      comment_offset = comment.line_number -
          (line_diffs.first.tag == :removed ? line_diffs.first.line_num_before :
           line_diffs.first.line_num_after)

      # The comment may have been made on a blank line at the edge of the diff, which we've since stripped off
      # for a cleaner display. If that happens, just show the comment after the last line in the diff.
      comment_appears_after_diff = (comment_offset >= line_diffs.size)

      line_prefix = { :added => "+ ", :removed => "- ", :same => "  " }

      output = []

      line_diffs.each_with_index do |line_diff, index|
        output << line_prefix[line_diff.tag] + CGI.escape_html(line_diff.data)
        if (comment_offset == index) || (comment_appears_after_diff && index == line_diffs.size - 1)
          output << "\n&lt;" + CGI.escape_html(comment.user.name) + "&gt; " +
              CGI.escape_html(comment.text) + "\n"
        end
      end
      output.join("\n")
    end.join("\n\n")
  %></pre>
<% end %>

</font>